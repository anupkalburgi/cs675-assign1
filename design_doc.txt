RMI:
====
PYRO4 library is used for remote invocation for this project.


SETUP
=====
All the servers are brought up before we can get started with the CAN Shell,
PYRONAME server is used to give logical names to the server tough it is not used other than naming. And also a way to confirm if all the nodes have come up.

CAN Network Working :
=====================

Joining of a Node:
-----------------

Command: join 2  --> join <nodenumber>

    A Random Point is Generated in range(0-10,0-10)

    In this client implementation join is called on node1, (With the python shell and manual imports you could call join on any nodes and it would do that same)

    On asking a node to get a new node on board,
        1. checks if the point is within its own zone
                if so:
                        - it will divide itself and produce a new zone. (With needed split, virtical or horizontal depending on the shape of it)
                        - break the hashtable with the needed co-ordinate generation
                        - Update itself, adds new_node to neighbours
                        - Go to all the neighbours and tell them about the partition and ask them to update.
                 if not:
                        - from the neighbours get the one closest to the XY point, route the request to the nearest neighbours. (so this goes recursively)


Leaving from the Network:
-------------------------

Command: leave 2  --> leave <nodenumber>

    On requesting Remove a node from the Network.
        Node that receives the request, checks if that is it self,
            if so:
                   get_a_sutable_neighbours -- Checks if any neighbours can form a proper rectangle, if so gets one of them, or else gets the one with smallest area
                   Give all hashtable to new identified node
            if not:
                    get_the_node(Every node knows where is located so we can get this to work)

FileInsert:
----------
command insert <keyword> <filename>

        Insert can be called on any node, in this Implementation again it is called on node1 by client
        On  insert a request,

         A X,Y co-ordinate is generated by calling Modulo Operations, EVEN and ODD computation
         And as similar to Join, the request is routed to a node which holds zone for the generated XY point. The routing startes with the neighbours.

View:
----
Command: view
or       view <nodeid>

        if a id is given the node is directly pulled up and information is diplayed.

        if command is received without a argument then,
            First node creates a visited and to_vist list,
                Every node will puts all its neighbours to to_visit list only if it is not already visted. And adds itself to the visited list.
                And the array is passed along call invocations , so then there are no more elements to visit, it means it does not have anyone to vist any more,
                and quites the loop .

Search:
-------

search <keyword>
        Again search can be issues on any node in this implementation it is done on node1.

        On a request to search by keyword.

        A X,Y co-ordinates  are generated, based on the same modulo operation that where used to insert,
        If the generated co-ordinated points belong to the same node's zone, then the hash_table is searched for the given key.
        Or else the request is routed to the neighbour which is closest to the generated point.



